/*
    자바 : 객체지향 프로그래밍 -> 클래스 작성.
        OOP(Object Oriented Programming) : 부동객체를 먼저 만들고 조립해가면서 완성시키는 기법

     객체(팔)<->객체(몸통)... 하면서 건담을 만드는 작업

     객체들도 서로 메소드를 주고받는다.


     객체들 사이의 관계 .
        1. 집합 관계 -> 완성품과 부품의 관계 -> 운명공동체 (폐차 -> 싹다 갈림)
        2. 사용 관계 -> 객체가 다른 객체를 사용-> 운명공동체는 X (강의가 끝나도 -> 강의실을 부수진않음)
        3. 상속 관계 -> 종류객체와 구체적인 사물객체 뭐 이런식인대 부모자식 특성 유전되는거마냥 잇는거


     객체지향 프로그래밍의 특징
        1. 캡슐화 : 사용자와 제작자를 구분해서 설계 -> 필드와 메소드를 감추고 실제 구현을 보여주지않음.
                 외부의 실수로 객체의 손상방지! by. 접근제한자

        2. 상속   : 상위 클레스의 필드와 메소드를 하위 객체에 물려주는 행위.
               1. 상위객체의 재사용성을 늘려준다.
               2. 유지보수의 장점.
               3. 확장성!

        3. 다형성 : 같은 타입이지만, 실행결과가 다양한 객체를 대입할 수 있는 성질을 말한다.
                1. 객체의 부품화 -> 자동차의 타이어를 규격만 맞으면 싸재로 넣을수 있는느낌스.

     객체(Object)와 클레스(Class).
           현실 설계도 -> 객체
           자바 클래스 -> 객체(인스턴스) 같은 느낌


     클래스 선언
        자바 식별자 규칙을 따라야함
            1. 하나이상의 문자
            2. 첫번째 숫자X
            3. $, _ 외의 특문 X
            4. 자바키워드 사용 볼가 (for, int)

        소스파일 이름 : 클래스 이름.java
        파일 하나당 하나의 클래스를 생성하는게 관례지만, 두개이상 클래스도 선언 가능
            => but public은 이름이 같은친구만 가능.


 */

public class Class_3_1_Class {
    public static  void main(String[] args)
    {
        System.out.println("Hi");
    }

}
